---
alwaysApply: true
---

# AI Search Analytics Platform

## Overview

The AI Search Analytics Platform is a cutting-edge tool designed to help website owners understand and optimize their content for AI-powered search engines. As AI search tools become increasingly prevalent, understanding how they interpret and rank your content is crucial for maintaining visibility in the evolving search landscape.

## Product Description

### Purpose

This platform analyzes how AI search engines might discover and rank your website content by:

- Generating realistic AI search queries that users might use
- Analyzing your website's performance for these queries
- Providing actionable insights to improve AI search visibility
- Tracking key metrics like ranking, visibility, and click potential

### Target Users

- SEO professionals adapting to AI-powered search
- Content creators optimizing for AI discovery
- Website owners wanting to improve their AI search presence
- Digital marketers tracking AI search performance

## Application Flow

The application follows a four-step process:

### 1. URL Input Step

Users begin by entering their website URL. The system validates the URL and prepares it for analysis.

### 2. Prompt Generation Step

The platform generates realistic AI search queries that users might use to find content related to the website. These prompts are categorized by topic (e.g., Integration, SEO, Best Practices) and users can select which ones to analyze.

### 3. Analysis Step

The selected queries are analyzed against the website content. The system:

- Crawls the website content
- Analyzes SEO metrics
- Generates insights about performance

### 4. Results Dashboard

Users receive comprehensive analytics including:

- Individual query performance metrics
- Aggregate KPIs
- Visual representations of data
- Actionable recommendations

## Technical Architecture

### Tech Stack

- **Framework**: Next.js 14 (App Router)
- **Styling**: Tailwind CSS
- **UI Components**: Shadcn/ui
- **Data Visualization**: Recharts
- **Icons**: Lucide React
- **Language**: TypeScript
- **Package Manager**: pnpm

### Project Structure

```
frontend/
├── src/
│   ├── app/
│   │   ├── globals.css          # Global styles and Tailwind config
│   │   ├── layout.tsx           # Root layout with metadata
│   │   └── page.tsx             # Main application page
│   ├── components/
│   │   ├── analytics/           # Analytics-specific components
│   │   │   ├── URLInputStep.tsx     # URL input interface
│   │   │   ├── PromptsStep.tsx      # Prompt selection interface
│   │   │   ├── AnalyzingStep.tsx    # Progress indicator
│   │   │   └── ResultsStep.tsx      # Results dashboard
│   │   └── ui/                  # Shadcn UI components
│   └── lib/
│       ├── types.ts             # TypeScript type definitions
│       └── utils.ts             # Utility functions
├── public/                      # Static assets
├── docs/                        # Documentation
└── package.json                 # Dependencies
```

## Components Overview

### URLInputStep Component

- Simple, focused interface for URL entry
- Client-side URL validation
- Clean error handling
- Responsive design with centered card layout

### PromptsStep Component

- Interactive prompt selection interface
- Visual feedback with checkboxes
- Category badges for organization
- Selection counter
- Back navigation support

### AnalyzingStep Component

- Animated progress indicator
- Step-by-step visualization of the analysis process
- Real-time progress updates
- Professional loading animation

### ResultsStep Component

- **KPI Cards**: Display key metrics at a glance
  - Total Queries analyzed
  - Average Ranking position
  - Overall Visibility score
  - Top performing Category
- **Data Table Tab**: Detailed query-by-query analysis
  - Query text and category
  - Ranking position with color coding
  - Visibility and click potential percentages
  - Search volume estimates
  - Difficulty scores
- **Visualizations Tab**:
  - Line chart comparing visibility vs click potential
  - Pie chart showing category distribution
  - Bar chart displaying average visibility by category

## Data Types

### Core Interfaces

```typescript
interface AnalysisResult {
  id: string;
  query: string;
  prompt: string;
  ranking: number;
  visibility: number;
  clickPotential: number;
  searchVolume: number;
  difficulty: number;
  category: string;
  timestamp: Date;
}

interface WebsiteAnalysis {
  url: string;
  totalQueries: number;
  averageRanking: number;
  overallVisibility: number;
  topCategory: string;
  results: AnalysisResult[];
}
```

## Current Implementation Status

### Completed Features

- ✅ Full application flow from URL input to results
- ✅ Responsive UI design
- ✅ Interactive components with proper state management
- ✅ Data visualization with multiple chart types
- ✅ Professional styling with Tailwind CSS
- ✅ Type-safe implementation with TypeScript
- ✅ Mock data generation for development

### Mock Data Implementation

Currently, the application uses mock data to demonstrate functionality:

- Generates 5 sample AI search queries
- Simulates a 3-second analysis process
- Creates randomized but realistic metrics
- Provides varied category distribution

## Installation & Setup

### Prerequisites

- Node.js 18+
- pnpm package manager

### Installation Steps

```bash
# Navigate to frontend directory
cd frontend

# Install dependencies
pnpm install

# Run development server
pnpm dev
```

### Environment Setup

No environment variables are required for the current mock implementation.

## Development Guidelines

### Code Style

- Use TypeScript for all new components
- Follow React best practices with functional components
- Implement proper error boundaries
- Use Tailwind CSS for styling

### Component Guidelines

- Keep components focused and single-purpose
- Use proper TypeScript interfaces for props
- Implement loading and error states
- Ensure responsive design

### State Management

- Currently using React useState for local state
- Ready for integration with state management library if needed
- Clean separation between UI and business logic

## UI/UX Considerations

### Design Principles

- Clean, professional interface
- Clear visual hierarchy
- Responsive design for all screen sizes
- Accessible color choices with proper contrast
- Intuitive navigation flow

### Visual Design

- Light mode only (as per requirements)
- Consistent spacing using Tailwind's spacing scale
- Card-based layout for clear content separation
- Color-coded metrics for quick scanning
